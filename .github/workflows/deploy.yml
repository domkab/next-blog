name: CI/CD Pipeline

on:
  push:
    branches: [main]
  workflow_dispatch:

concurrency:
  group: next-blog-${{ github.ref }}
  cancel-in-progress: false

jobs:
  # --- 1) One-time / idempotent server prep (dirs, perms, ACLs) ---
  bootstrap-server:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Bootstrap uploads dir / ACLs (deploy+domka write, caddy read)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -euo pipefail
            # Figure out caddy user (caddy or www-data)
            CADDY_USER="$( (id -u caddy >/dev/null 2>&1 && echo caddy) || (id -u www-data >/dev/null 2>&1 && echo www-data) || echo caddy )"

            # Ensure ACL package
            sudo apt-get update -y
            sudo apt-get install -y acl

            # Create tree (edit this for project-specific cases)
            sudo mkdir -p /var/www/next-blog/uploads/{posts,featured-posts}

            # Base ownership & perms
            sudo chown -R deploy:deploy /var/www/next-blog
            sudo chmod -R 755 /var/www/next-blog

            # ACLs (existing files/dirs)
            sudo setfacl -R  \
              -m u:deploy:rwx \
              -m u:domka:rwx  \
              -m u:${CADDY_USER}:rx \
              /var/www/next-blog

            # Default ACLs (inherit for NEW files/dirs)
            sudo setfacl -dR \
              -m u:deploy:rwx \
              -m u:domka:rwx  \
              -m u:${CADDY_USER}:rx \
              /var/www/next-blog

            echo "== getfacl =="
            getfacl /var/www/next-blog | sed -n '1,80p'

  # --- 2) Build in CI ---
  build:
    runs-on: ubuntu-latest
    needs: bootstrap-server
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Prepare upload folders
        run: |
          mkdir -p public/uploads/posts
          mkdir -p public/uploads/featured-posts

      - name: Lint
        run: npm run lint

      - name: Build
        run: npm run build
        env:
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
          MONGODB_DBNAME: ${{ secrets.MONGODB_DBNAME }}
          NEXT_PUBLIC_FIREBASE_API_KEY: ${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }}
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
          NEXT_PUBLIC_USE_THEME: '${{ secrets.NEXT_PUBLIC_USE_THEME }}'
          NEXT_PUBLIC_CLIENT_SIDE_HEADER: '${{ secrets.NEXT_PUBLIC_CLIENT_SIDE_HEADER }}'
          NEXT_PUBLIC_CLIENT_SIDE_FOOTER: '${{ secrets.NEXT_PUBLIC_CLIENT_SIDE_FOOTER }}'

      - name: Debug build output
        run: |
          echo "📂 pwd: $(pwd)"
          find . -maxdepth 1 -type d | sort
          [ -d ./.next ] || (echo "❌ ./.next missing" && exit 1)
          [ -d ./public ] || (echo "❌ ./public missing" && exit 1)
          echo "✅ build artifacts present"

      - name: Pack artifact (exclude uploads)
        run: |
          tar -czf release.tgz \
            --exclude='public/uploads/**' \
            .next public package.json package-lock.json

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: next-blog-release
          path: release.tgz
          if-no-files-found: error
          retention-days: 7

  # --- 3) Deploy & restart ---
  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: next-blog-release
          path: .

      - name: Ensure app dir exists
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            mkdir -p /home/deploy/next-blog

      - name: Upload tarball
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          source: release.tgz
          target: /home/deploy/next-blog
          debug: true

      - name: Extract & restart (PM2)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -e
            cd /home/deploy/next-blog
            echo "📦 Extracting release.tgz"
            tar -xzf release.tgz
            rm -f release.tgz

            # remove old build artifacts (keep uploads, configs, public)
            find . -maxdepth 1 -type d -name ".next*" ! -path "./.next" -prune -exec rm -rf {} +

            echo "📜 public/uploads preserved:"
            ls -al public/uploads || echo "uploads missing (first deploy?)"

            # Install pm2 if missing, install prod deps, restart
            command -v pm2 >/dev/null 2>&1 || npm i -g pm2
            npm ci --omit=dev
            pm2 reload next-blog --update-env || pm2 start npm --name "next-blog" -- run start
            pm2 save